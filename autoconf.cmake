#=============================================================================
# Copyright 2010-2011 Andrey Volkov <avolkov1221@gmail.com>.
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distributed this file outside of CMake, substitute the full
#  License text for the above reference.)
#
# AC_XXX macroses library for simplify autoconf scripts porting
#
# $Id: autoconf.cmake 3 2010-02-19 13:03:54Z avolkov $

include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckPrototypeExists)
include(CheckDIRSymbolExists)
include(CheckFunctionExists)

macro(AC_INIT package version)
# bug-report tarname url)
	project(${package})
	set(AC_PACKAGE_NAME "${package}")
	set(PACKAGE_NAME AC_PACKAGE_NAME)

	set(AC_PACKAGE_VERSION ${version})
	set(PACKAGE_VERSION	${version})
	set(VERSION	${version})
	
	if(${ARGC} GREATER 2)
    	set(AC_PACKAGE_BUGREPORT ${argv2})
    	set(REPORT_BUGS_TO ${AC_PACKAGE_BUGREPORT})
	endif()

	if(${ARGC} GREATER 3)
    	set(AC_PACKAGE_TARNAME ${argv3})
    else()
    	set(AC_PACKAGE_TARNAME ${argv3})
	endif()

	if(${ARGC} GREATER 4)
    	set(AC_PACKAGE_URL ${argv4})
	endif()

#	Exactly �package version�.
#	AC_PACKAGE_STRING
#	PACKAGE_STRING

#   Exactly bug-report, if one was provided.
#	AC_PACKAGE_BUGREPORT
#	PACKAGE_BUGREPORT

#	AC_PACKAGE_TARNAME
#	PACKAGE_TARNAME

#  Exactly url, if one was provided.
#  If url was empty, but package begins with �GNU �,
#  then this defaults to 'http://www.gnu.org/software/tarname/',
#  otherwise, no URL is assumed.

#	AC_PACKAGE_URL
#	PACKAGE_URL
endmacro(AC_INIT)

#macro(AC_INIT)
#set(_ac_config_h_string_
#"/* config.h. Generated by cmake.  */
#")
#endmacro(AC_INIT)

function(AC_MSG_CHECKING msg)
    message(STATUS "checking ${msg}...")
endfunction(AC_MSG_CHECKING)

function(AC_MSG_WARN msg)
    message("!! ${msg}")
endfunction(AC_MSG_WARN)

function(AC_MSG_ERROR msg)
    message(FATAL_ERROR "${msg}")
endfunction(AC_MSG_ERROR)

function(AC_MSG_RESULT msg)
    message(STATUS "${msg}\n")
endfunction(AC_MSG_RESULT)

macro(AC_DEFINE have_var value description)
    if(${ARGC} EQUAL 1)
      set(value 1)
    endif()
	if(${ARGC} EQUAL 3)
		set(_ac_config_h_string_ 
			"${_ac_config_h_string_}\n${description}\n")
	endif()
	set(_ac_config_h_string_ 
		"${_ac_config_h_string_}\n"
		"#cmakedefine	${have_var} \${${have_var}}\n")
endmacro(AC_DEFINE)

macro(AC_CHECK_HEADERS)
	foreach(h ${ARGV})
		string(REGEX REPLACE "[.\\/]" "_" VARIABLE "${h}")
		set(VARIABLE "HAVE_${VARIABLE}")
		string(TOUPPER "${VARIABLE}" VARIABLE)
		check_include_file(${h} ${VARIABLE})
		if(!${${VARIABLE}})
		          unset(${VARIABLE})
		else()
			AC_DEFINE(${VARIABLE} 1
			"/* Define to 1 if you have the <${h}> header file. */")
		endif()
	endforeach()
endmacro(AC_CHECK_HEADERS)

macro(AC_CHECK_TYPE check_type)
    string(REPLACE " " "_" name ${check_type})
    string(REPLACE "*" "p" name ${name})

    if(NOT DEFINED ac_cv_type_${name})
        set(lst ${ARGV})
        list(REMOVE_AT lst 0)
    	foreach(h ${lst})
            set(s "${s}\n${h}")
        endforeach()
        check_c_source_compiles("
            ${s}
            int main(int argc, char *argv[])
            {
              ${check_type} *d = 0;
              return 0;
            }" ac_cv_type_${name} )

		if(!ac_cv_type_${name})
		          unset(ac_cv_type_${name})
		          unset(acx_cv_type_${name})
		else()
			AC_DEFINE(ac_cv_type_${name} 1
			    "/* Define to 1 if you have the ${check_type} type. */")
			AC_DEFINE(acx_cv_type_${name} ${check_type}
			    "/* Define to ${check_type} if you have the ${check_type} type. */")
		endif()
    endif()
endmacro(AC_CHECK_TYPE)

#AC_DEFUN([AC_CHECK_FUNCS],
#[m4_map_args_w([$1], [_AH_CHECK_FUNC(], [)])]dnl
#[AS_FOR([AC_func], [ac_func], [$1],
#[AC_CHECK_FUNC(AC_func,
#               [AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_]AC_func)) $2],
#               [$3])dnl])
#])# AC_CHECK_FUNCS
macro(AC_CHECK_FUNCS)
    foreach(f ${ARGV})
        set(VARIABLE "HAVE_${f}") 
        string(TOUPPER "${VARIABLE}" VARIABLE)
        check_function_exists(${f} ${VARIABLE})
        if(NOT ${VARIABLE})
            unset(${VARIABLE})
        else()
#            AC_DEFINE_UNQUOTED()    
			AC_DEFINE(${VARIABLE} 1
    			"/* Define to 1 if you have the '${f}' function. */")
        endif()
    endforeach()
endmacro(AC_CHECK_FUNCS)

macro(AC_HEADER_STDC)
    message(STATUS "Checking whether system has ANSI C header files")
    check_include_files(
        "dlfcn.h;stdint.h;stddef.h;inttypes.h;stdlib.h;strings.h;string.h;float.h" 
        StandardHeadersExist)
    if(StandardHeadersExist)
    	check_prototype_exists(memchr "string.h" memchrExists)
    	if(memchrExists)
    		check_prototype_exists(free "stdlib.h" freeExists)
    		if(freeExists)
    			message(STATUS "ANSI C header files - found")
    			set(STDC_HEADERS 1 CACHE INTERNAL "System has ANSI C header files")
    			set(HAVE_STRINGS_H 1)
    			set(HAVE_STRING_H 1)
    			set(HAVE_FLOAT_H 1)
    			set(HAVE_STDLIB_H 1)
    			set(HAVE_STDDEF_H 1)
    			set(HAVE_STDINT_H 1)
    			set(HAVE_INTTYPES_H 1)
    			set(HAVE_DLFCN_H 1)
    		endif(freeExists)
    	endif(memchrExists)
    endif(StandardHeadersExist)
    
    if(NOT STDC_HEADERS)
    	message(STATUS "ANSI C header files - not found")
    	set(STDC_HEADERS 0 CACHE INTERNAL "System has ANSI C header files")
    endif(NOT STDC_HEADERS)
endmacro(AC_HEADER_STDC)

MACRO(AC_HEADER_DIRENT)
check_dirsymbol_exists("sys/stat.h;sys/types.h;dirent.h" HAVE_DIRENT_H)
if(HAVE_DIRENT_H)
	set(HAVE_SYS_STAT_H 1)
	set(HAVE_SYS_TYPES_H 1)
endif (HAVE_DIRENT_H)
ENDMACRO(AC_HEADER_DIRENT)

# AC_HEADER_STDBOOL
# -----------------
# Check for stdbool.h that conforms to C99.

#macro(AC_HEADER_STDBOOL)
#	message(STATUS "Checking for stdbool.h that conforms to C99")
#
#[AC_CACHE_CHECK([for stdbool.h that conforms to C99],
#   [ac_cv_header_stdbool_h],
#   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
#      [[
##include <stdbool.h>
##ifndef bool
# "error: bool is not defined"
##endif
##ifndef false
# "error: false is not defined"
##endif
##if false
# "error: false is not 0"
##endif
##ifndef true
# "error: true is not defined"
##endif
##if true != 1
# "error: true is not 1"
##endif
##ifndef __bool_true_false_are_defined
# "error: __bool_true_false_are_defined is not defined"
##endif
#
#        struct s { _Bool s: 1; _Bool t; } s;
#
#        char a[true == 1 ? 1 : -1];
#        char b[false == 0 ? 1 : -1];
#        char c[__bool_true_false_are_defined == 1 ? 1 : -1];
#        char d[(bool) 0.5 == true ? 1 : -1];
#        bool e = &s;
#        char f[(_Bool) 0.0 == false ? 1 : -1];
#        char g[true];
#        char h[sizeof (_Bool)];
#        char i[sizeof s.t];
#        enum { j = false, k = true, l = false * true, m = true * 256 };
#        _Bool n[m];
#        char o[sizeof n == m * sizeof n[0] ? 1 : -1];
#        char p[-1 - (_Bool) 0 < 0 && -1 - (bool) 0 < 0 ? 1 : -1];
##       if defined __xlc__ || defined __GNUC__
#         /* Catch a bug in IBM AIX xlc compiler version 6.0.0.0
#            reported by James Lemley on 2005-10-05; see
#            http://lists.gnu.org/archive/html/bug-coreutils/2005-10/msg00086.html
#            This test is not quite right, since xlc is allowed to
#            reject this program, as the initializer for xlcbug is
#            not one of the forms that C requires support for.
#            However, doing the test right would require a runtime
#            test, and that would make cross-compilation harder.
#            Let us hope that IBM fixes the xlc bug, and also adds
#            support for this kind of constant expression.  In the
#            meantime, this test will reject xlc, which is OK, since
#            our stdbool.h substitute should suffice.  We also test
#           quickly whether someone messes up the test in the
#            future.  */
#         char digs[] = "0123456789";
#         int xlcbug = 1 / (&(digs + 5)[-2 + (bool) 1] == &digs[4] ? 1 : -1);
##       endif
#        /* Catch a bug in an HP-UX C compiler.  See
#           http://gcc.gnu.org/ml/gcc-patches/2003-12/msg02303.html
#           http://lists.gnu.org/archive/html/bug-coreutils/2005-11/msg00161.html
#         */
#        _Bool q = true;
#        _Bool *pq = &q;
#      ]],
#      [[
#        *pq |= q;
#        *pq |= ! q;
#        /* Refer to every declared value, to avoid compiler optimizations.  */
#        return (!a + !b + !c + !d + !e + !f + !g + !h + !i + !!j + !k + !!l
#                + !m + !n + !o + !p + !q + !pq);
#      ]])],
#      [ac_cv_header_stdbool_h=yes],
#      [ac_cv_header_stdbool_h=no])])
#AC_CHECK_TYPES([_Bool])
#if test $ac_cv_header_stdbool_h = yes; then
#  AC_DEFINE(HAVE_STDBOOL_H, 1, [Define to 1 if stdbool.h conforms to C99.])
#fi
#])# AC_HEADER_STDBOOL
#
#endmacro(AC_HEADER_DIRENT)

macro(AC_CHECK_DECL funcs)
    if(${ARGC} EQUAL 1)
#set includes to defalt    
    endif()

endmacro(AC_CHECK_DECL)

macro(AC_CHECK_DECLS funcs)
    if(${ARGC} EQUAL 1)
#set includes to defalt    
    endif()
    
    foreach(f ${funcs})
    
    endforeach()
endmacro(AC_CHECK_DECLS)

macro(AC_CHECK_SIZEOF check_type)
    string(REPLACE " " "_" name ${check_type})
    string(REPLACE "*" "p" name ${name})
    string(TOUPPER ${name} up_name)
    CHECK_TYPE_SIZE("${check_type}" SIZEOF_${up_name})
    set(ac_cv_sizeof_${name} ${SIZEOF_${up_name}})
    message(STATUS "ac_cv_sizeof_${name} is ${ac_cv_sizeof_${name}}")
endmacro(AC_CHECK_SIZEOF)

include(stdint)
